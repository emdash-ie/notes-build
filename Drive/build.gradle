import java.nio.file.Path
import java.io.File
import java.util.HashSet
import java.util.Set

buildDir "/Users/Noel/Google Drive/Noel's Notes"

task buildDrive(type : PandocTask) {
    group 'Build'
    description 'Generates the pdfs for Drive'

    inputFiles = fileTree(dir: sourceDir, include: '**/*.md')

    outputCalculator = { File input ->
        Path relativePath = projectDir.toPath().relativize(input.toPath())
        Path outputPath = buildDir.toPath().resolve(relativePath)
        String outputString = outputPath.toString().replace(".md", ".pdf")
        return new File(outputString)
    }
}

task makeDriveLinks(type: LinkTask) {
    group 'Build'
    description 'Links non-markdown files into Drive'
    
    sourceFiles = fileTree(dir: sourceDir, exclude: '**/*.md')
    sourceRoot = new File(sourceDir)
}

class PandocTask extends DefaultTask {
    Transformer<File, File> outputCalculator
    FileCollection inputFiles
    private Iterable<File> outputFiles

    @SkipWhenEmpty
    @InputFiles
    public FileCollection getInputFiles() {
        return inputFiles
    }

    @OutputFiles
    public Iterable<File> getOutputFiles() {
        if (outputFiles == null) {
            outputFiles = determineOutputFiles()
        }
        return outputFiles
    }

    private Iterable<File> determineOutputFiles() {
        Set<File> outputs = new HashSet<File>()
        inputFiles.each { File input ->
            outputs.add(outputCalculator.transform(input))
        }
        return outputs
    }

    @TaskAction
    public void runPandoc(IncrementalTaskInputs inputs) {
        inputs.outOfDate {input ->
            project.exec {
                ignoreExitValue true
                executable '/usr/local/bin/pandoc'
                args = [
                    "${input.getFile().getAbsolutePath()}",
                    "-o", "${outputCalculator.transform(input.getFile()).getAbsolutePath()}",
                    "--resource-path=${input.getFile().getParentFile().getAbsolutePath()}",
                    "-s",
                    "--highlight-style", "tango",
                    "--pdf-engine=xelatex",
                    "-V", "margin-top=1in",
                    "-V", "margin-bottom=1in",
                    "-V", "margin-left=1.25in",
                    "-V", "margin-right=1.25in",
                    "-V", "mainfont=Source Serif Pro",
                    "-V", "sansfont=Source Sans Pro",
                    "-V", "monofont=Source Code Pro",
                    "-V", "fontsize=12pt"
                ]
            }
        }

        inputs.removed { input ->
            def outputFile = outputCalculator.transform(input.getFile())
            if (outputFile.exists()) {
                outputFile.delete()
            }
        }
    }
}
