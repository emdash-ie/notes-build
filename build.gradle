subprojects {
    ext.sourceDir = '/Users/Noel/Developer/Projects/Notes/Source'
    ext.LinkTask = LinkTask
}

class LinkTask extends DefaultTask {
    FileCollection sourceFiles
    private Iterable<File> targetFiles
    File sourceRoot

    Transformer<File, File> targetCalculator = { File source ->
        Path relativePath = sourceDir.toPath().relativize(source.toPath())
        Path targetPath = buildDir.toPath().resolve(relativePath)
        return targetPath.toFile()
    }

    @SkipWhenEmpty
    @InputFiles
    public FileCollection getSourceFiles() {
        return sourceFiles
    }

    @OutputFiles
    public Iterable<File> getTargetFiles() {
        if (targetFiles == null) {
            targetFiles = determineTargetFiles()
        }
        return targetFiles
    }

    private Iterable<File> determineTargetFiles() {
        Set<File> targets = new HashSet<File>()
        sourceFiles.each { File source ->
            targets.add(targetCalculator.transform(source))
        }
        return targets
    }

    @TaskAction
    public void makeLinks(IncrementalTaskInputs sources) {
        sources.outOfDate {source ->
            project.exec {
                ignoreExitValue true
                executable '/bin/ln'
                args = [
                    "${source.getFile().getAbsolutePath()}",
                    "${targetCalculator.transform(source.getFile()).getAbsolutePath()}",
                ]
            }
        }

        sources.removed { source ->
            def targetFile = targetCalculator.transform(source.getFile())
            if (targetFile.exists()) {
                targetFile.delete()
            }
        }
    }
}
