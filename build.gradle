import java.nio.file.Path

subprojects {
    ext.notesDirectory = new File('/Users/Noel/Developer/Projects/Notes/Source')
    ext.LinkTask = LinkTask
    ext.PandocTask = PandocTask
}

class LinkTask extends DefaultTask {
    FileCollection sourceFiles
    private Iterable<File> targetFiles
    File sourceRoot

    Transformer<File, File> targetCalculator = { File source ->
        Path relativePath = sourceRoot.toPath().relativize(source.toPath())
        Path targetPath = project.buildDir.toPath().resolve(relativePath)
        return targetPath.toFile()
    }

    @SkipWhenEmpty
    @InputFiles
    public FileCollection getSourceFiles() {
        return sourceFiles
    }

    @OutputFiles
    public Iterable<File> getTargetFiles() {
        if (targetFiles == null) {
            targetFiles = determineTargetFiles()
        }
        return targetFiles
    }

    private Iterable<File> determineTargetFiles() {
        Set<File> targets = new HashSet<File>()
        sourceFiles.each { File source ->
            targets.add(targetCalculator.transform(source))
        }
        return targets
    }

    @TaskAction
    public void makeLinks(IncrementalTaskInputs sources) {
        sources.outOfDate {source ->
            project.exec {
                ignoreExitValue true
                executable '/bin/ln'
                args = [
                    "${source.getFile().getAbsolutePath()}",
                    "${targetCalculator.transform(source.getFile()).getAbsolutePath()}",
                ]
            }
        }

        sources.removed { source ->
            def targetFile = targetCalculator.transform(source.getFile())
            if (targetFile.exists()) {
                targetFile.delete()
            }
        }
    }
}

class PandocTask extends DefaultTask {
    Transformer<File, File> outputCalculator
    FileCollection inputFiles
    private Iterable<File> outputFiles
    List<String> pandocOptions = []

    @SkipWhenEmpty
    @InputFiles
    public FileCollection getInputFiles() {
        return inputFiles
    }

    @OutputFiles
    public Iterable<File> getOutputFiles() {
        if (outputFiles == null) {
            outputFiles = determineOutputFiles()
        }
        return outputFiles
    }

    private Iterable<File> determineOutputFiles() {
        Set<File> outputs = new HashSet<File>()
        inputFiles.each { File input ->
            outputs.add(outputCalculator.transform(input))
        }
        return outputs
    }

    @TaskAction
    public void runPandoc(IncrementalTaskInputs inputs) {
        inputs.outOfDate {input ->
            project.exec {
                ignoreExitValue true
                executable '/usr/local/bin/pandoc'
                args = [
                    "${input.getFile().getAbsolutePath()}",
                    "-o", "${outputCalculator.transform(input.getFile()).getAbsolutePath()}",
                    "--resource-path=${input.getFile().getParentFile().getAbsolutePath()}",
                ] + pandocOptions
            }
        }

        inputs.removed { input ->
            def outputFile = outputCalculator.transform(input.getFile())
            if (outputFile.exists()) {
                outputFile.delete()
            }
        }
    }
}
